files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_load_env_from_ssm.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e  # Exit on any error

      echo "üîß Loading environment variables from AWS Systems Manager Parameter Store"
      
      # Get AWS region
      AWS_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null || echo "ap-south-1")
      export AWS_DEFAULT_REGION=$AWS_REGION
      echo "üìç Using AWS Region: $AWS_REGION"

      # Check if AWS CLI is available and IAM role is properly set
      if ! command -v aws &> /dev/null; then
        echo "‚ö†Ô∏è AWS CLI not found, skipping SSM parameter loading"
        exit 0
      fi

      # Test AWS credentials
      if ! aws sts get-caller-identity &> /dev/null; then
        echo "‚ö†Ô∏è AWS credentials not available, skipping SSM parameter loading"
        exit 0
      fi

      # Function to get parameter from SSM and export as environment variable
      get_and_export_param() {
        local param_name=$1
        local env_var_name=$2

        echo "Loading parameter: $param_name"
        local param_value
        param_value=$(aws ssm get-parameter --name "$param_name" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null) || {
          echo "‚ö†Ô∏è Failed to load parameter: $param_name"
          return 1
        }

        if [ -n "$param_value" ] && [ "$param_value" != "None" ]; then
          export "$env_var_name=$param_value"
          echo "‚úì Loaded $env_var_name"
          # Write to environment file for persistence
          echo "$env_var_name=$param_value" >> /opt/elasticbeanstalk/deployment/env_vars
        else
          echo "‚ö†Ô∏è Empty or invalid parameter: $param_name"
        fi
      }

      # Create directory for environment variables file
      mkdir -p /opt/elasticbeanstalk/deployment
      echo "# Environment variables loaded from SSM" > /opt/elasticbeanstalk/deployment/env_vars

      # Critical Configuration
      get_and_export_param "/Rocketry_Box02/backend/NODE_ENV" "NODE_ENV" || true
      get_and_export_param "/Rocketry_Box02/backend/FRONTEND_URL" "FRONTEND_URL" || true
      get_and_export_param "/Rocketry_Box02/backend/AWS_REGION" "AWS_REGION" || true

      # Core Security & Database Credentials
      get_and_export_param "/Rocketry_Box02/backend/MONGODB_ATLAS_URI" "MONGODB_ATLAS_URI" || true
      get_and_export_param "/Rocketry_Box02/backend/REDIS_PASSWORD" "REDIS_PASSWORD" || true
      get_and_export_param "/Rocketry_Box02/backend/JWT_SECRET" "JWT_SECRET" || true
      get_and_export_param "/Rocketry_Box02/backend/JWT_REFRESH_SECRET" "JWT_REFRESH_SECRET" || true
      get_and_export_param "/Rocketry_Box02/backend/WEBHOOK_SECRET" "WEBHOOK_SECRET" || true
      get_and_export_param "/Rocketry_Box02/backend/COOKIE_SECRET" "COOKIE_SECRET" || true

      # Third-party Service API Keys (optional)
      get_and_export_param "/Rocketry_Box02/backend/FAST2SMS_API_KEY" "FAST2SMS_API_KEY" || true
      get_and_export_param "/Rocketry_Box02/backend/RAZORPAY_KEY_ID" "RAZORPAY_KEY_ID" || true
      get_and_export_param "/Rocketry_Box02/backend/RAZORPAY_KEY_SECRET" "RAZORPAY_KEY_SECRET" || true

      echo "‚úÖ Environment variables loading completed"

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/02_set_env_vars.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Source the environment variables file if it exists
      if [ -f /opt/elasticbeanstalk/deployment/env_vars ]; then
        source /opt/elasticbeanstalk/deployment/env_vars
        echo "‚úÖ Environment variables sourced successfully"
        
        # Set basic fallbacks if not loaded from SSM
        export NODE_ENV="${NODE_ENV:-production}"
        export PORT="${PORT:-8000}"
        
        echo "üìù Using NODE_ENV: $NODE_ENV"
        echo "üìù Using PORT: $PORT"
      else
        echo "‚ö†Ô∏è Environment variables file not found, using defaults"
        export NODE_ENV="production"
        export PORT="8000"
      fi

container_commands:
  01_load_ssm_parameters:
    command: "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_load_env_from_ssm.sh"
    leader_only: true
    ignoreErrors: true  # Don't fail deployment if SSM loading fails
  02_source_env_vars:
    command: "/opt/elasticbeanstalk/hooks/appdeploy/pre/02_set_env_vars.sh"
    ignoreErrors: true  # Don't fail deployment if env sourcing fails

option_settings:
  aws:autoscaling:launchconfiguration:
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
  # Environment variables moved to platform.config to avoid duplicates
